html {
    box-sizing: border-box;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

html,
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
}

body {
    background: #ffffff url('../img/geometry2.png'); /* Background pattern from Subtle Patterns */
    font-family: 'Coda', cursive;
    font-size: 18px;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

h1 {
    font-family: 'Open Sans', sans-serif;
    font-weight: 300;
}

/*
 * Styles for the deck of cards
 */

.deck {
    width: 660px;
    height: auto;
    background: linear-gradient(160deg, #02ccba 0%, #aa7ecd 100%);
    padding: 32px;
    border-radius: 10px;
    box-shadow: 12px 15px 20px 0 rgba(46, 61, 73, 0.5);
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    margin: 0 0 3em;
}

.deck .card {
    height: 125px;
    width: 125px;
    margin: 5px;
    background: #2e3d49;
    font-size: 0;
    color: #ffffff;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 5px 2px 20px 0 rgba(46, 61, 73, 0.5);
    transition: all .5s ease-in;
}

.deck .card.open {
    background: #02b3e4;
    cursor: default;
    animation: cardOpen .5s linear;
}

/*class for animation on cardNotMatch*/
.deck .open.animate {
    background: #f9697f;
    animation: cardNotMatch .5s linear;
}

.deck .card.show {
    font-size: 33px;
}

.deck .card.match {
    cursor: default;
    background: #02ccba;
    font-size: 33px;
    animation: cardMatch 1s linear;
}

/*
 * Styles for the Score Panel
 */
.score-panel {
    text-align: left;
    min-width: 260px;
    margin-bottom: 10px;
}

.score-panel .stars {
    margin: 0;
    padding: 0;
    display: inline-block;
    margin: 0 5px 0 0;
}

.score-panel .stars li {
    list-style: none;
    display: inline-block;
}

.score-panel .restart {
    float: right;
    cursor: pointer;
}

/*Styles for timer */
.timerDisplay {
    display: inline-block;
    padding: 0 10px 0 20px;
}

/*hide the hours not necessary for this game*/
#hoursElapsed {
    display: none;
}

.output {
    display: inline-block;
    padding: 2px;
    width: 35px;
    margin-left: -10px;
}

/*winner*/
.winner {
    background: linear-gradient(160deg, rgba(2,204,186,.4) 0%, rgba(170,126,205,.4) 100%);
    height: 100vh;
}

.winnerMsg {
    text-align: center;
    display: none;
}

.winnerMsg .results {
    list-style: none;
    padding: 0;
    display: inline-block;
}

.winnerMsg .previousResults {
    list-style: none;
    padding: 0;
    display: inline-block;
}


.winnerMsg .stars {
    margin: 0;
    padding: 0;
    display: inline-block;
}

.winnerMsg .stars li {
    list-style: none;
    display: inline-block;
}

.buttonContainer {
    text-align: center;
}

/*winner button*/
.button {
    border-radius: 20px;
    border: none;
    height: 48px;
    width: 75%;
    background: linear-gradient(90deg, rgba(2,204,186,1) 0%, rgba(170,126,205,1) 100%);
    font-weight: bold;
}

.button:hover {
    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
}

.button:active {
  transform: translateY(3px);
}

.button:focus {
    outline: 0;
}

/*animations*/
@keyframes cardNotMatch {
    0% {
        transform: rotate(3deg);
    }

    25% {
        transform: rotate(6deg);
    }

    50% {
        transform: rotate(9deg);
    }

    75% {
        transform: rotate(12deg);
    }

    100% {
        transform: rotate(15deg);
    }
}

@keyframes cardOpen {
    0% {
        transform: rotateY(33deg);
    }

    10% {
        transform: rotateY(66deg);
    }

    20% {
        transform: rotateY(99deg);
    }

    30% {
        transform: rotateY(132deg);
    }

    40% {
        transform: rotateY(165deg);
    }

    50% {
        transform: rotateY(198deg);
    }

    60% {
        transform: rotateY(231deg);
    }

    70% {
        transform: rotateY(264deg);
    }

    80% {
        transform: rotateY(297deg);

    }

    90% {
        transform: rotateY(330deg);

    }

    100% {
        transform: rotateY(360deg);

    }
}

@keyframes cardMatch {
    0% {
        transform: rotate3d(.2, 0, 0, 12deg);
    }

    10% {
        transform: rotate3d(.4, 0, 0, 24deg);
    }

    20% {
        transform: rotate3d(.6, 0, 0, 36deg);
    }

    30% {
        transform: rotate3d(.8, 0, 0, 48deg);
    }

    40% {
        transform: rotate3d(1, 0, 0, 60deg);
    }

    50% {
        transform: rotate3d(.8, 0, 0, 48deg);
    }

    60% {
        transform: rotate3d(.6, 0, 0, 36deg);
    }

    70% {
        transform: rotate3d(.4, 0, 0, 24deg);
    }

    80% {
        transform: rotate3d(.2, 0, 0, 12deg);
    }

    90% {
        transform: rotate3d(.2, 0, 0, 12deg);
    }

    100% {
        transform: rotate3d(0, 0, 0, 0deg);
    }
}



